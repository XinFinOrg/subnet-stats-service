diff --git a/node_modules/web3-core-helpers/node_modules/web3-utils/lib/index.js b/node_modules/web3-core-helpers/node_modules/web3-utils/lib/index.js
index f33a432..1e715a7 100644
--- a/node_modules/web3-core-helpers/node_modules/web3-utils/lib/index.js
+++ b/node_modules/web3-core-helpers/node_modules/web3-utils/lib/index.js
@@ -259,10 +259,18 @@ var toWei = function (number, unit) {
 var toChecksumAddress = function (address) {
     if (typeof address === 'undefined')
         return '';
-    if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
-        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
-    address = address.toLowerCase().replace(/^0x/i, '');
-    var addressHash = utils.sha3(address).replace(/^0x/i, '');
+    if (!/^(0x)?[0-9a-f]{40}$/i.test(address) && !/^(xdc)?[0-9a-f]{40}$/i.test(address))
+        throw new Error('Given address "' + address + '" is not a valid XDC address.');
+        
+    var addressHash;
+    if (/^(xdc)?[0-9a-f]{40}$/i.test(address)) {
+      address = address.toLowerCase().replace(/^xdc/i, '');
+      addressHash = utils.sha3(address).replace(/^xdc/i, '');
+    } else {
+      address = address.toLowerCase().replace(/^0x/i, '');
+      addressHash = utils.sha3(address).replace(/^0x/i, '');
+    }
+        
     var checksumAddress = '0x';
     for (var i = 0; i < address.length; i++) {
         // If ith character is 8 to f then make it uppercase
diff --git a/node_modules/web3-core-helpers/node_modules/web3-utils/lib/utils.js b/node_modules/web3-core-helpers/node_modules/web3-utils/lib/utils.js
index f3ea4ab..97dde48 100644
--- a/node_modules/web3-core-helpers/node_modules/web3-utils/lib/utils.js
+++ b/node_modules/web3-core-helpers/node_modules/web3-utils/lib/utils.js
@@ -78,7 +78,7 @@ var toTwosComplement = function (number) {
  */
 var isAddress = function (address) {
     // check if it has the basic requirements of an address
-    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
+    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)&& !/^(xdc)?[0-9a-f]{40}$/i.test(address)) {
         return false;
         // If it's ALL lowercase or ALL upppercase
     }
@@ -99,8 +99,15 @@ var isAddress = function (address) {
  */
 var checkAddressChecksum = function (address) {
     // Check each case
-    address = address.replace(/^0x/i, '');
-    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');
+    var addressHash;
+    var address;
+    if(/^(xdc)?[0-9a-f]{40}$/i.test(address)) {
+      address = address.replace(/^xdc/i, '');
+      addressHash = sha3(address.toLowerCase()).replace(/^xdc/i, '');  
+    } else {
+      address = address.replace(/^0x/i, '');
+      addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');
+    }
     for (var i = 0; i < 40; i++) {
         // the nth letter should be uppercase if the nth digit of casemap is 1
         if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
@@ -119,8 +126,12 @@ var checkAddressChecksum = function (address) {
  * @returns {String} right aligned string
  */
 var leftPad = function (string, chars, sign) {
-    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
-    string = string.toString(16).replace(/^0x/i, '');
+    var hasPrefix = /^0x/i.test(string) || /^xdc/i.test(string) || typeof string === 'number';
+    if (string.startsWith('xdc')) {
+      string = string.toString(16).replace(/^xdc/i, '');
+    } else {
+      string = string.toString(16).replace(/^0x/i, '');
+    }
     var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
     return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
 };
@@ -134,8 +145,12 @@ var leftPad = function (string, chars, sign) {
  * @returns {String} right aligned string
  */
 var rightPad = function (string, chars, sign) {
-    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
-    string = string.toString(16).replace(/^0x/i, '');
+    var hasPrefix = /^0x/i.test(string) || /^xdc/i.test(string) || typeof string === 'number';
+    if (string.startsWith('xdc')) {
+      string = string.toString(16).replace(/^xdc/i, '');
+    } else {
+      string = string.toString(16).replace(/^0x/i, '');
+    }
     var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
     return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
 };
@@ -175,7 +190,11 @@ var hexToUtf8 = function (hex) {
         throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
     var str = "";
     var code = 0;
-    hex = hex.replace(/^0x/i, '');
+    if (hex.startsWith('xdc')) {
+      hex = hex.replace(/^xdc/i, '');
+    } else {
+      hex = hex.replace(/^0x/i, '');
+    }
     // remove 00 padding from either side
     hex = hex.replace(/^(?:00)*/, '');
     hex = hex.split("").reverse().join("");
@@ -277,7 +296,12 @@ var hexToBytes = function (hex) {
     if (!isHexStrict(hex)) {
         throw new Error('Given value "' + hex + '" is not a valid hex string.');
     }
-    hex = hex.replace(/^0x/i, '');
+    if (hex.startsWith('xdc')) {
+      hex = hex.replace(/^xdc/i, '');
+    } else {
+      hex = hex.replace(/^0x/i, '');
+    }
+    
     for (var bytes = [], c = 0; c < hex.length; c += 2)
         bytes.push(parseInt(hex.slice(c, c + 2), 16));
     return bytes;
